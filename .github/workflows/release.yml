# We will continuously release a new image as soon as a commit hits the main
# branch or is manually dispatched. The image tags follow a date-based
# versioning scheme (YYYYMMDDHHMM). This allows for multiple builds on the same
# day with the same commit hash which is especially useful for the
# automatically updated age displayed on the website. QA actions are maintained
# in their own workflow file.

name: Release

on:
  schedule:
    # My current age is displayed on the website which should be updated
    # automatically on my birthday.
    - cron: '0 0 9 1 *'
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# NOTE: With most of the actions, we are okay with pinning to major release
# tags. This is perfectly acceptable for my threat model given the providers
# that are used here.

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge with sigstore/fulcio
      # for the key-less signature of the image.
      id-token: write
    outputs:
      image-version: ${{ steps.version.outputs.version }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install cosign
        uses: sigstore/cosign-installer@v2
        with:
          cosign-release: 'v1.13.1'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Log into registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Construct version
        id: version
        run: echo "version=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.version.outputs.version }}
          # The documentation and vendor labels are required to overwrite the
          # labels of the Caddy base image. Let's also be a nice citizen of the
          # ecosystem and set the base image labels.
          labels: |
            org.opencontainers.image.authors=Marius Kießling <vcs@mariuskiessling.de>
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.title=Marius Kießling's personal website
            org.opencontainers.image.description=The personal website of Marius Kießling.
            org.opencontainers.image.documentation=https://github.com/mariuskiessling/website
            org.opencontainers.image.vendor=Marius Kießling
            org.opencontainers.image.base.digest=sha256:86182e6d30691dc14ff37ef4e33e0d953a04d05d4afbd2989d2f8ec62ae94e06
            org.opencontainers.image.base.name=registry.hub.docker.com/library/caddy:2.6.4

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # We will use cosign's key-less signatures based on Fulcia CA as this is
      # a public project and there is no need to fix the attestation to a
      # specific key.
      - name: Sign the published Docker image
        env:
          # As the key-less signatures are still considered experimental, we
          # have to set this key.
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  rollout:
    name: Roll out release
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Check out k8s-clusters repository
        uses: actions/checkout@v3
        with:
          repository: mariuskiessling/k8s-clusters
          ssh-key: '${{ secrets.K8S_CLUSTERS_DEPLOY_KEY }}'

      - name: Set up Git
        run: |
          git config user.name "Website CI Bot"
          git config user.email "<>"

      - name: Install kustomize
        run: |
          mkdir -p $HOME/.kustomize
          cd $HOME/.kustomize

          expected_digest='2e8c28a80ce213528251f489db8d2dcbea7c63b986c8f7595a39fc76ff871cd7'
          curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.0/kustomize_v5.0.0_linux_amd64.tar.gz -o kustomize.tar.gz
          sha=$(sha256sum kustomize.tar.gz | cut -d' ' -f1);
          if [[ $sha != "${expected_digest}" ]]; then exit 1; fi
          tar xfz kustomize.tar.gz
          chmod +x kustomize

          echo "$HOME/.kustomize" >> $GITHUB_PATH

      - name: Update image in kustomization
        run: |
          cd apps/nbg1/personal-website
          kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release.outputs.image-version }}

      - name: Commit and push updated image tag
        run: |
          git add apps/nbg1/personal-website/kustomization.yaml
          git commit -m "Update website image to version ${{ needs.release.outputs.image-version }}"
          git push origin main
